% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lifelihoodData.R
\name{lifelihoodData}
\alias{lifelihoodData}
\title{Data object for lifelihood}
\usage{
lifelihoodData(
  df,
  sex,
  sex_start,
  sex_end,
  maturity_start,
  maturity_end,
  clutchs,
  death_start,
  death_end,
  model_specs,
  covariates,
  matclutch = FALSE,
  matclutch_size = NULL,
  right_censoring_date = 1000,
  critical_age = 20,
  ratiomax = 10
)
}
\arguments{
\item{df}{Dataframe with the data of life history. It
should have one row per life history / observation.}

\item{sex}{Column name containing the sex of the
observations.}

\item{sex_start}{Column name containing the first
date of the interval in which the sex was determined.}

\item{sex_end}{Column name containing the second date
of the interval in which the sex was determined.}

\item{maturity_start}{Column name containing the first
date of the interval in which the maturity was determined.}

\item{maturity_end}{Column name containing the second
date of the interval in which the maturity was determined.}

\item{clutchs}{Vector containing the names of the clutch
columns. The order should be: first clutch first date, first
clutch second date, first clutch clutch size, second clutch
first date, first clutch second date, second clutch clutch
size, and so on. If the observation with the most clutches
is, for example, 10, then the vector must be of size 10 x 3 = 30
(3 elements per clutch: first date, second date and size).}

\item{death_start}{Column name containing the first date of
the interval in which the death was determined.}

\item{death_end}{Column name containing the second date of
the interval in which the death was determined.}

\item{model_specs}{Vector of characters with the name of the
statistical law to use. Must be of length 3 and each element
must be one of "wei" (Weibull law), "exp" (Exponential law),
"gam" (Gamma law) or "lgn" (Log-normal law). The first one is
used for mortality, the second one is used for maturity and the
third is used for reproduction.}

\item{covariates}{Vector containing the names of the covariates.}

\item{matclutch}{Whether the maturity event (designated by
\code{maturity_start} and \code{maturity_end}) is a clutch event or not.
If \code{TRUE}, must specify the \code{matclutch_size} argument. Default
is \code{FALSE}.}

\item{matclutch_size}{Column name containing the size of the
clutch for the maturity event. Only used (and required) if
\code{matclutch} is \code{TRUE}.}

\item{right_censoring_date}{(CURRENTLY IGNORED) Time (integer)
point at which a subjectâ€™s data is censored. This means that for
subjects who do not experience the event of interest (e.g.,
death, failure) by this date, their data is considered censored.
In practice, choose a value much larger than the maximum longevity
seen in the data.}

\item{critical_age}{(CURRENTLY IGNORED) Critical age (integer)
below which life histories are not followed individually.}

\item{ratiomax}{(CURRENTLY IGNORED) Maximum ratio (integer)
between number of offspring of last and first reproduction events.
Cannot be greater than ratiomax.}
}
\value{
\code{lifelihoodData} object
}
\description{
Creates a \code{lifelihoodData} object, which is a list containing
all the information needed to run the lifelihood program of a
given dataset of individual life history. This function will
mainly be used to pass to \code{\link[=lifelihood]{lifelihood()}} or for customizing
parameter boundaries with \code{\link[=default_bounds_df]{default_bounds_df()}}.
}
\examples{
library(lifelihood)
library(tidyverse)

df <- fakesample |>
  mutate(
    geno = as.factor(geno),
    type = as.factor(type)
  )
head(df)

clutchs <- c(
  "clutch_start1", "clutch_end1", "clutch_size1",
  "clutch_start2", "clutch_end2", "clutch_size2"
)

dataLFH <- lifelihoodData(
  df = df,
  sex = "sex",
  sex_start = "sex_start",
  sex_end = "sex_end",
  maturity_start = "mat_start",
  maturity_end = "mat_end",
  clutchs = clutchs,
  death_start = "death_start",
  death_end = "death_end",
  covariates = c("geno", "type"),
  model_specs = c("gam", "lgn", "wei")
)

summary(data)
}
