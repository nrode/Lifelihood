---
title: "How to use lifelihood"
vignette: >
  %\VignetteIndexEntry{how-to-use-lifelihood}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
knitr:
  opts_chunk:
    collapse: true
    comment: '#>'
---



<div class="topVignette">If you haven't already check it, have a look at:</div>

- [what is the required data format to work with lifelihood?](required-data-format.html)
- [setting up the configuration file](setting-up-the-configuration-file.html)

# Load libraries
***

```{r}
library(lifelihood)
library(tidyverse)
```

# Data preparation
***

Load the dataset from `.csv` file:

```{r}
# input data
df <- fakesample |>
  mutate(
    type = as.factor(type),
    geno = as.factor(geno)
  )

df |> head()
```

Prepare input parameters for the `lifelihoodData()` function:

```{r}
# name of the columns of the clutchs into a single vector
clutchs <- c(
  "clutch_start1",
  "clutch_end1",
  "clutch_size1",
  "clutch_start2",
  "clutch_end2",
  "clutch_size2"
)
```

*Note: If you have a large number of clutches, it is easier to generate this vector programmatically. See the [Generate clutch names](generate-clutch-names.html) vignette.*

# Create the `lifelihoodData` object

`lifelihoodData()` creates a `lifelihoodData` object, which is a list containing all the information needed to run the lifelihood program of a given dataset of individual life history.

This function mostly takes as input your dataset, your column names.

It also has the `model_specs` argument, which is a vector of characters with the name of the statistical law to use. Must be of length 3 and each element must be one of `"wei"` (Weibull law), `"exp"` (Exponential law), `"gam"` (Gamma law) or `"lgn"` (Log-normal law). The first one is used for **death**, the second one is used for **maturity** and the third one for **clutchs**.

```{r}
dataLFH <- lifelihoodData(
  df = df,
  sex = "sex",
  sex_start = "sex_start",
  sex_end = "sex_end",
  maturity_start = "mat_start",
  maturity_end = "mat_end",
  clutchs = clutchs,
  death_start = "death_start",
  death_end = "death_end",
  covariates = c("geno", "type"),
  model_specs = c("gam", "lgn", "wei")
)
```

# Get the results
***

## All default parameters

Once you have created your `lifelihoodData` object with `lifelihoodData()`, you can call the `lifelihood()` function to run the lifelihood program.

It returns a `lifelihoodResults` object, which is a list containing all the results of the analysis.

Here it's a minimalist usage of the function, where we only specify the `lifelihoodData` object, the path to the [configuration file](2-setting-up-the-configuration-file.html) and the seeds to use. The `raise_estimation_warning` argument will be the focus of the [next vignette](4-custom-param-boundaries-and-estimation-warning.html).

```{r}
results <- lifelihood(
  lifelihoodData = dataLFH,
  path_config = get_config_path("config"),
  seeds = c(1, 2, 3, 4),
  raise_estimation_warning = FALSE
)
summary(results)
```

# Get specific results
***

The `lifelihoodResults` object is a list containing all the results of the analysis. We can get specific results by calling the list element.

```{r}
coef(results)
coeff(results, "expt_death")
coeff(results, "survival_param2")

AIC(results)
BIC(results)

logLik(results)

prediction(results, parameter_name = "expt_death") |> head()
prediction(results, parameter_name = "expt_death", type = "response") |> head()
```

# Next step
***

Now that you have seen how to use the package, you can go further and [customise your parameter boundaries and deal with estimation warnings](custom-param-boundaries-and-estimation-warning.html).
